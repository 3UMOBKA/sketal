from handler.base_plugin import CommandPlugin
from utils import parse_user_id

import random


class TicTacToePlugin(CommandPlugin):
    __slots__ = (
        "c_invite", "c_decline", "c_accept", "c_make_turn",
        "invites", "games", "game_name"
    )

    def __init__(self, c_invite=None, c_decline=None, c_accept=None,
            c_make_turn=None, prefixes=None, strict=False):
        if not c_invite:
            c_invite = ("–∫–Ω –≤—ã–∑–æ–≤",)

        if not c_decline:
            c_decline = ("–∫–Ω —Ç–∫–∞–∑–∞—Ç—å—Å—è",)

        if not c_accept:
            c_accept = ("–∫–Ω –ø—Ä–∏–Ω—è—Ç—å",)

        if not c_make_turn:
            c_make_turn = ("–∫–Ω —Ö–æ–¥",)

        super().__init__(*(c_invite + c_decline + c_accept + c_make_turn), prefixes=prefixes, strict=strict)

        self.c_invite = c_invite
        self.c_decline = c_decline
        self.c_accept = c_accept
        self.c_make_turn = c_make_turn

        self.game_name = "–ö—Ä–µ—Å—Ç–∏–∫–∏ –∏ –Ω–æ–ª–∏–∫–∏"

        self.invites = {}
        self.games = {}

    def game(self, game, controls=True):
        message = \
            f"üí≠ –¢–µ–∫—É—â–µ–µ –ø–æ–ª–µ:\n" + \
            "\n".join(" ".join(line) for line in game["field"])

        if controls:
            message += \
                f"\nüëâ –ù–∞–ø–∏—à–∏—Ç–µ {self.prefixes[-1]}{self.c_make_turn[0]} —Å–ª–æ–±–∏–∫_–∫–ª–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∞_–∫–ª–µ—Ç–∫–∏ - —á—Ç–æ–±—ã —Å—Ö–æ–¥–∏—Ç—å —Ç—É–¥–∞.\n" + \
                f"üëâ –ù–∞–ø–∏—à–∏—Ç–µ {self.prefixes[-1]}{self.c_make_turn[0]} —Å–¥–∞—Ç—å—Å—è - —á—Ç–æ–±—ã —Å–¥–∞—Ç—å—Å—è."

        return message

    async def process_message(self, msg):
        command, text = self.parse_message(msg)

        if command in self.c_invite:
            puid = await parse_user_id(msg)

            if not puid:
                return await msg.answer("ü§úüèª –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏, –∫–æ–≥–æ –≤—ã–∑—ã–≤–∞—Ç—å!")

            if puid in self.games:
                return await msg.answer("ü§úüèª –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç!")

            if puid in self.invites:
                return await msg.answer("ü§úüèª –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω!")

            if msg.user_id == puid:
                return await msg.answer("ü§úüèª –ù–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å —Å–µ–±—è!")

            self.invites[puid] = msg.user_id
            self.invites[msg.user_id] = puid

            await self.api.messages.send(peer_id=puid, message=
                f"üí≠ –í–∞—Å [id{msg.user_id}|–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏] –¥–ª—è –∏–≥—Ä—ã –≤ \"{self.game_name}\"!\n"
                f"üëâ –ù–∞–ø–∏—à–∏—Ç–µ {self.prefixes[-1]}{self.c_accept[0]} - —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤.\n"
                f"üëâ –ù–∞–ø–∏—à–∏—Ç–µ {self.prefixes[-1]}{self.c_decline[0]} - —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤.\n")

            await self.api.messages.send(peer_id=msg.user_id, message=f"üí≠ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

            return

        if command in self.c_decline:
            if msg.user_id in self.invites:
                await self.api.messages.send(peer_id=self.invites[msg.user_id], message=f"üí≠ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
                await self.api.messages.send(peer_id=msg.user_id, message=f"üí≠ –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")

                del self.invites[self.invites[msg.user_id]]
                del self.invites[msg.user_id]

                return

            return await msg.answer("ü§úüèª –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!")

        if command in self.c_accept:
            if msg.user_id in self.invites:
                await self.api.messages.send(peer_id=self.invites[msg.user_id], message=f"üí≠ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
                await self.api.messages.send(peer_id=msg.user_id, message=f"üí≠ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

                game = {
                    "field": list(["_", "_", "_"] for i in range(3)),
                    "current_turn": int(random.random() * 2),
                    "players": [msg.user_id, self.invites[msg.user_id]],
                    "players_count": 2
                }

                del self.invites[self.invites[msg.user_id]]
                del self.invites[msg.user_id]

                for player in game["players"]:
                    self.games[player] = game

                await self.api.messages.send(
                    peer_id=game["players"][game["current_turn"] % game["players_count"]],
                    message=self.game(game)
                )

                return

        if command in self.c_make_turn:
            game = self.games[msg.user_id]

            if text == "—Å–¥–∞—é—Å—å":
                for player in game["players"]:
                    if player == msg.user_id:
                        await self.api.messages.send(peer_id=player, message=f"üí≠ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                    else:
                        await self.api.messages.send(peer_id=player, message=f"üí≠ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")

                    del self.games[player]

                return

            try:
                x, y = text.split()
            except Exception:
                return await msg.answer("ü§úüèª –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª–± –∏ —Å—Ç—Ä–æ–∫—É (–¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å!")

            if not x.isdigit():
                return await msg.answer("ü§úüèª –°—Ç–æ–ª–± –∫–ª–µ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ!")

            if not y.isdigit():
                return await msg.answer("ü§úüèª –°—Ç—Ä–æ–∫–∞ –∫–ª–µ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!")

            x = int(x) - 1
            y = int(y) - 1

            if game["field"][y][x] != "_":
                return await msg.answer("ü§úüèª –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")

            game["field"][y][x] = "X" if game["current_turn"] % 2 else "O"

            won = False

            for i in range(3):
                if i == y:
                    if game["field"][i][0] == game["field"][i][1] == game["field"][i][2]:
                        won = True
                        break

                if i == x:
                    if game["field"][0][i] == game["field"][1][i] == game["field"][2][i]:
                        won = True
                        break

            if not won and x == y:
                if game["field"][0][0] == game["field"][1][1] == game["field"][2][2]:
                    won = True

            if not won and 2 - x == y:
                if game["field"][2][0] == game["field"][1][1] == game["field"][0][2]:
                    won = True

            if won:
                for player in game["players"]:
                    if player == msg.user_id:
                        await self.api.messages.send(peer_id=player, message=self.game(game, controls=False) + "\nüí≠ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
                    else:
                        await self.api.messages.send(peer_id=player, message=self.game(game, controls=False)  + "\nüí≠ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")

                    del self.games[player]

                return

            else:
                over = True

                for i in range(3):
                    for j in range(3):
                        if game["field"][i][j] == "_":
                            over = False
                            break

                if over:
                    for player in game["players"]:
                        if player == msg.user_id:
                            await self.api.messages.send(peer_id=player, message=self.game(game, controls=False) + "\nüí≠ –ù–∏—á—å—è!")
                        else:
                            await self.api.messages.send(peer_id=player, message=self.game(game, controls=False) + "\nüí≠ –ù–∏—á—å—è!")

                        del self.games[player]

                    return

            game["current_turn"] += 1

            await self.api.messages.send(
                peer_id=game["players"][game["current_turn"] % game["players_count"]],
                message=self.game(game)
            )

            return await msg.answer(self.game(game, controls=False) + "\nüí≠ –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥!")
